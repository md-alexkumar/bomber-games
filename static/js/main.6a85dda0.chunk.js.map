{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","props","getRandom","n","Math","floor","random","getArray","arrLength","arr","length","x","push","getPosition","level","a","pos","dupArr","winArray","pow","posLength","y","includes","map","item","key","cross","columns","update","setState","array","bgColor","points","error","win","newGame","exitKey","changeBG","state","console","log","nextlevel","this","className","onClick","class","style","gridTemplateColumns","background","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6a85dda0.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nexport default class App extends Component {\r\n   constructor (props) {\r\n      super(props);\r\n      this.state = {\r\n         level: 1,\r\n         columns: '',\r\n         array: [],\r\n         bgColor: [],\r\n         points: 0,\r\n         error: false,\r\n         newGame: false,\r\n         exitKey: null,\r\n         winArray: [],\r\n         win: false\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.getPosition(1)\r\n   }\r\n   \r\n   getRandom = n => Math.floor((Math.random() * n) + 1);\r\n   \r\n   getArray = (arrLength) => {\r\n      let arr=[]\r\n      while(arr.length < arrLength) {\r\n         var x = this.getRandom(3)\r\n         arr.push(x);\r\n      }\r\n      return arr\r\n   }\r\n   getPosition = async(level) => {\r\n      let pos=[], dupArr = [], arr=[], winArray = []\r\n      let arrLength = Math.pow((level + 2), 2)\r\n      let posLength = Math.floor(arrLength / 2)\r\n      while(pos.length < posLength) {\r\n         var y = this.getRandom(arrLength - 1)\r\n         if(!dupArr.includes(y)) {\r\n            pos.push(y)\r\n         }\r\n         dupArr.push(y)\r\n      }\r\n      arr = await this.getArray(arrLength)\r\n      pos.map((item, key) => arr[item] = -1)\r\n      arr.map((item, key) => item !== -1 && winArray.push(key))\r\n      let cross = level + 2\r\n      let columns = ``\r\n      while(cross) {\r\n         let update = `${columns} auto`\r\n         columns = update\r\n         cross = cross - 1\r\n      }\r\n      this.setState({ array: arr, bgColor: [], points: 0, error: false, win: false, level, newGame: false, exitKey: null, winArray, columns })\r\n   }\r\n   changeBG = key => {\r\n      let bgColor = this.state.bgColor\r\n      let winArray = this.state.winArray\r\n      console.log('bgColor',bgColor)\r\n      console.log('winArray',winArray)\r\n      console.log('key',key)\r\n      let array = this.state.array\r\n      let win = false\r\n      let points = this.state.points\r\n\r\n      if(!bgColor.includes(key)) {\r\n         if(array[key] === -1) {\r\n            bgColor.push(key)\r\n            this.setState({ bgColor, exitKey: key }, () => {\r\n               this.setState({ error: true, })\r\n            })\r\n         } else {\r\n            points += array[key]\r\n            bgColor.push(key)\r\n            console.log('check BG Array', bgColor)\r\n            if((bgColor.length === winArray.length)) {\r\n               win = true\r\n            }\r\n            this.setState({ bgColor, points, win })\r\n         }\r\n      }\r\n   }\r\n   newGame = () => {\r\n      this.getPosition(1)\r\n   }\r\n   nextlevel = () => {\r\n      this.getPosition(this.state.level + 1)\r\n   }\r\n   render() {\r\n      let bgColor = this.state.bgColor\r\n      return (\r\n         <div>\r\n            <div className='points'>\r\n               Your points : {this.state.points}\r\n            </div>\r\n            {\r\n               this.state.error && \r\n               <div className='gameOver'>\r\n                  Game Over :(\r\n                  <button className='btn btn-warning ml-5' onClick={this.newGame}>\r\n                     NewGame\r\n                  </button>\r\n               </div>\r\n            }\r\n            {\r\n               this.state.win &&\r\n               <div className='gameOver'>\r\n                  You Win :)\r\n                  <button className='btn btn-success ml-5' onClick={this.nextlevel}>\r\n                     NextLevel\r\n                  </button>\r\n               </div>\r\n            }\r\n            <div class=\"grid-container\" style={{ gridTemplateColumns: this.state.columns }}>\r\n               {\r\n                  this.state.array.map((item, key) => {\r\n                     return (\r\n                        <Fragment>\r\n                           <div\r\n                              className=\"grid-item\" \r\n                              style={{\r\n                                 background : (this.state.exitKey === key || (this.state.win && item === -1)) ? 'orange' : bgColor.includes(key) ? 'white' : 'black',\r\n                              }}\r\n                              onClick={(!this.state.error && !this.state.win) ? () => this.changeBG(key) : null}>\r\n                                 {(this.state.exitKey === key || (this.state.win && item === -1)) ? 'X' :item}\r\n                           </div>\r\n                        </Fragment>\r\n                     ) \r\n                  })\r\n               }\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}